#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

constexpr long long INF = 1e18 + 13;
using namespace std;

vector<long long> a;
int main() {
    int n;
    cin >> n;
    a.resize(n);
    for (int i = 0; i < n; i++)
        cin >> a[i];
    reverse(a.begin(), a.end());
    vector <long long> dp(n + 1, INF), num(n, -1), par(n, -1);
    dp[0] = -INF;
    for (int i = 0; i < n; i++) {
        auto id = lower_bound(dp.begin(), dp.end(), a[i]) - dp.begin();
        dp[id] = a[i];
        num[id] = i;
        par[i] = num[id - 1];
    }
    int s = 0;
    for (int i = par.size() - 1; i >= 0; i--) {
        if (par[i] != -1) {
            s = i;
            break;
        }
    }
    vector <int> ans;
    ans.push_back(s);
    while (par[ans.back()] != -1){
        ans.push_back(par[ans.back()]);
    }
    printf("%d\n", ans.size());
    for (int i: ans){
        cout << a.size() - i << ' ';
    }
}